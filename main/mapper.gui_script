local messages = require "main.messages"
local devices = require "main.devices"

local all_inputs = {
    "ltrigger",
    "lshoulder",
    "lstick_up",
    "lstick_down",
    "lstick_left",
    "lstick_right",
    "lstick_click",
    "lpad_up",
    "lpad_down",
    "lpad_left",
    "lpad_right",
    "rtrigger",
    "rshoulder",
    "rpad_up",
    "rpad_down",
    "rpad_left",
    "rpad_right",
    "rstick_up",
    "rstick_down",
    "rstick_left",
    "rstick_right",
    "rstick_click",
    "back",
    "start",
    "guide",
}

local ITEM_SPACING = 46
local ITEM_OFFSET_0 = vmath.vector3(0, 0 * -ITEM_SPACING, 0)
local ITEM_OFFSET_1 = vmath.vector3(0, 1 * -ITEM_SPACING, 0)
local ITEM_OFFSET_2 = vmath.vector3(0, 2 * -ITEM_SPACING, 0)
local ITEM_OFFSET_3 = vmath.vector3(0, 3 * -ITEM_SPACING, 0)
local ITEM_OFFSET_4 = vmath.vector3(0, 4 * -ITEM_SPACING, 0)

local LEFT_START_POS = vmath.vector3(512, -22, 0)
local MIDDLE_START_POS = vmath.vector3(512, -22, 0)
local RIGHT_START_POS = vmath.vector3(512, -22, 0)

local LEFT_HOLD_POS = vmath.vector3(512, 210, 0)
local MIDDLE_HOLD_POS = vmath.vector3(512, 210, 0)
local RIGHT_HOLD_POS = vmath.vector3(512, 210, 0)

local LTOP_GROUP_POS = vmath.vector3(512 - 250, 650, 0)
local LSTICK_GROUP_POS = vmath.vector3(512 - 400, 550, 0)
local LPAD_GROUP_POS = vmath.vector3(512 - 270, 350, 0)

local RTOP_GROUP_POS = vmath.vector3(512 + 250, 650, 0)
local RPAD_GROUP_POS = vmath.vector3(512 + 400, 550, 0)
local RSTICK_GROUP_POS = vmath.vector3(512 + 270, 350 + ITEM_SPACING, 0)

local inputs_info = {
    lstick_up = {
        name = "Left Stick Up",
        prompt = "Move the left stick UP, and hold it there.",
        trigger_name = "GAMEPAD_LSTICK_UP",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LSTICK_GROUP_POS + ITEM_OFFSET_0,
    },
    lstick_down = {
        name = "Left Stick Down",
        prompt = "Move the left stick DOWN, and hold it there.",
        trigger_name = "GAMEPAD_LSTICK_DOWN",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LSTICK_GROUP_POS + ITEM_OFFSET_1,
    },
    lstick_left = {
        name = "Left Stick Left",
        prompt = "Move the left stick LEFT, and hold it there.",
        trigger_name = "GAMEPAD_LSTICK_LEFT",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LSTICK_GROUP_POS + ITEM_OFFSET_2,
    },
    lstick_right = {
        name = "Left Stick Right",
        prompt = "Move the left stick RIGHT, and hold it there.",
        trigger_name = "GAMEPAD_LSTICK_RIGHT",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LSTICK_GROUP_POS + ITEM_OFFSET_3,
    },
    lstick_click = {
        name = "Left Stick Click",
        prompt = "Depress to CLICK the left stick centrally (and hold).",
        trigger_name = "GAMEPAD_LSTICK_CLICK",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LSTICK_GROUP_POS + ITEM_OFFSET_4,
    },
    rstick_up = {
        name = "Right Stick Up",
        prompt = "Move the right stick UP, and hold it there.",
        trigger_name = "GAMEPAD_RSTICK_UP",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RSTICK_GROUP_POS + ITEM_OFFSET_0,
    },
    rstick_down = {
        name = "Right Stick Down",
        prompt = "Move the right stick DOWN, and hold it there.",
        trigger_name = "GAMEPAD_RSTICK_DOWN",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RSTICK_GROUP_POS + ITEM_OFFSET_1,
    },
    rstick_left = {
        name = "Right Stick Left",
        prompt = "Move the right stick LEFT, and hold it there.",
        trigger_name = "GAMEPAD_RSTICK_LEFT",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RSTICK_GROUP_POS + ITEM_OFFSET_2,
    },
    rstick_right = {
        name = "Right Stick Right",
        prompt = "Move the right stick RIGHT, and hold it there.",
        trigger_name = "GAMEPAD_RSTICK_RIGHT",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RSTICK_GROUP_POS + ITEM_OFFSET_3,
    },
    rstick_click = {
        name = "Right Stick Click",
        prompt = "Depress to CLICK the right stick centrally (and hold).",
        trigger_name = "GAMEPAD_RSTICK_CLICK",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RSTICK_GROUP_POS + ITEM_OFFSET_4,
    },
    lpad_up = {
        name = "L-PAD Up",
        prompt = "Press and hold UP on the left-side D-PAD.",
        trigger_name = "GAMEPAD_LPAD_UP",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LPAD_GROUP_POS + ITEM_OFFSET_0,
    },
    lpad_down = {
        name = "L-PAD Down",
        prompt = "Press and hold DOWN on the left-side D-PAD.",
        trigger_name = "GAMEPAD_LPAD_DOWN",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LPAD_GROUP_POS + ITEM_OFFSET_1,
    },
    lpad_left = {
        name = "L-PAD Left",
        prompt = "Press and hold LEFT on the left-side D-PAD.",
        trigger_name = "GAMEPAD_LPAD_LEFT",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LPAD_GROUP_POS + ITEM_OFFSET_2,
    },
    lpad_right = {
        name = "L-PAD Right",
        prompt = "Press and hold RIGHT on the left-side D-PAD.",
        trigger_name = "GAMEPAD_LPAD_RIGHT",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LPAD_GROUP_POS + ITEM_OFFSET_3,
    },
    rpad_up = {
        name = "R-PAD Up",
        prompt = "Using the four action buttons on the right-side,\npress and hold the TOP button.",
        trigger_name = "GAMEPAD_RPAD_UP",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RPAD_GROUP_POS + ITEM_OFFSET_0,
    },
    rpad_down = {
        name = "R-PAD Down",
        prompt = "Using the four action buttons on the right-side,\npress and hold the BOTTOM button.",
        trigger_name = "GAMEPAD_RPAD_DOWN",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RPAD_GROUP_POS + ITEM_OFFSET_1,
    },
    rpad_left = {
        name = "R-PAD Left",
        prompt = "Using the four action buttons on the right-side,\npress and hold the LEFT button.",
        trigger_name = "GAMEPAD_RPAD_LEFT",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RPAD_GROUP_POS + ITEM_OFFSET_2,
    },
    rpad_right = {
        name = "R-PAD Right",
        prompt = "Using the four action buttons on the right-side,\npress and hold the RIGHT button.",
        trigger_name = "GAMEPAD_RPAD_RIGHT",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RPAD_GROUP_POS + ITEM_OFFSET_3,
    },
    ltrigger = {
        name = "Left Trigger",
        prompt = "Press and hold the LEFT trigger\n(a.k.a. ZL or L2).",
        trigger_name = "GAMEPAD_LTRIGGER",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LTOP_GROUP_POS + ITEM_OFFSET_0,
    },
    lshoulder = {
        name = "Left Shoulder Button",
        prompt = "Press and hold the LEFT shoulder button\n(a.k.a. left-bumper or L1).",
        trigger_name = "GAMEPAD_LSHOULDER",
        start_pos = LEFT_START_POS,
        hold_pos = LEFT_HOLD_POS,
        done_pos = LTOP_GROUP_POS + ITEM_OFFSET_1,
    },
    rtrigger = {
        name = "Right Trigger",
        prompt = "Press and hold the RIGHT trigger\n(a.k.a. ZR or R2).",
        trigger_name = "GAMEPAD_RTRIGGER",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RTOP_GROUP_POS + ITEM_OFFSET_0,
    },
    rshoulder = {
        name = "Right Shoulder Button",
        prompt = "Press and hold the RIGHT sholder button\n(a.k.a. right-bumper or R1).",
        trigger_name = "GAMEPAD_RSHOULDER",
        start_pos = RIGHT_START_POS,
        hold_pos = RIGHT_HOLD_POS,
        done_pos = RTOP_GROUP_POS + ITEM_OFFSET_1,
    },
    back = {
        name = "Back Button",
        prompt = "Press and hold the back button\n(a.k.a. '-' or select).",
        trigger_name = "GAMEPAD_BACK",
        start_pos = MIDDLE_START_POS,
        hold_pos = MIDDLE_HOLD_POS,
        done_pos = vmath.vector3(512 - 115, 490, 0),
    },
    start = {
        name = "Start Button",
        prompt = "Press and hold the start button\n(a.k.a. '+' or menu).",
        trigger_name = "GAMEPAD_START",
        start_pos = MIDDLE_START_POS,
        hold_pos = MIDDLE_HOLD_POS,
        done_pos = vmath.vector3(512 + 115, 490, 0),
    },
    guide = {
        name = "Home/Guide Button",
        prompt = "Press and hold the home/guide button.",
        trigger_name = "GAMEPAD_GUIDE",
        start_pos = MIDDLE_START_POS,
        hold_pos = MIDDLE_HOLD_POS,
        done_pos = vmath.vector3(512, 440, 0),
    },
}

local STATE_MAPPING = 1
local STATE_COMPLETE = 2

local function highlight_single_input(self, lit_input)
    for _, input in ipairs(all_inputs) do
        local node = gui.get_node("lit_" .. input)
        gui.set_enabled(node, input == lit_input)
    end
end

local function set_input_name_and_prompt(self, name, prompt)
    gui.set_text(gui.get_node("current_input"), name)
    gui.set_text(gui.get_node("prompt_text"), prompt)
end

local function new_capture_data(self, input_id)
    local nodes = gui.clone_tree(gui.get_node("input_item"))
    local input_info = inputs_info[input_id]
    local capture_data = {
        trigger_name = input_info.trigger_name,
        is_skipped = false,
        root_node = nodes["input_item"],
        done_node = nodes["done"],
        skip_node = nodes["skip"],
        text_node = nodes["mapping_text"],
        icon_node = nodes["icon"],
    }
    gui.set_enabled(capture_data.root_node, true)
    gui.play_flipbook(capture_data.icon_node, "icon_" .. input_id)
    gui.set_text(capture_data.text_node, "---\n---")
    gui.set_position(capture_data.root_node, input_info.start_pos)
    gui.animate(capture_data.root_node, gui.PROP_POSITION, input_info.hold_pos, gui.EASING_OUTBACK, 0.35, 0.2)
    return capture_data
end

local function complete_mapping(self)
    self.state = STATE_COMPLETE
    highlight_single_input(self, nil)
    local prompt = "Check inputs then press ENTER to save the mapping.\nPress ESC to cancel this mapping."
    set_input_name_and_prompt(self, "Mapping Complete", prompt)
    gui.set_enabled(gui.get_node("other_controls"), false)
end

local function finalize_current_mapping(self, input_id)
    local capture_data = self.captured_inputs[input_id]
    local input_info = inputs_info[input_id]

    gui.animate(capture_data.root_node, "position.x", input_info.done_pos.x, gui.EASING_OUTSINE, 0.4)
    gui.animate(capture_data.root_node, "position.y", input_info.done_pos.y, gui.EASING_INOUTSINE, 0.5)
    gui.set_enabled(capture_data.done_node, not capture_data.is_skipped)
    gui.set_enabled(capture_data.skip_node, capture_data.is_skipped)

    if not capture_data.is_skipped then
        -- TODO: Encode the capture data to a short two-line string including
        -- input type, index, hat mask, and characters for modifier flags
        gui.set_text(capture_data.text_node, "Done")
    end
end

local function continue_mapping_next(self)
    self.active_input = self.active_input + 1
    if self.active_input > #all_inputs then
        complete_mapping(self)
        return
    end

    local input_id = all_inputs[self.active_input]
    highlight_single_input(self, input_id)

    local input_info = inputs_info[input_id]
    set_input_name_and_prompt(self, input_info.name, input_info.prompt)

    self.captured_inputs[input_id] = new_capture_data(self, input_id)
end

local function skip_input_mapping(self)
    local input_id = all_inputs[self.active_input]
    local capture_data = self.captured_inputs[input_id]
    capture_data.is_skipped = true
    finalize_current_mapping(self, input_id)
    continue_mapping_next(self)
end

local function capture_input_mapping(self)
    local input_id = all_inputs[self.active_input]
    local capture_data = self.captured_inputs[input_id]
    -- TODO: Store detected input settings in capture_data
    continue_mapping_next(self)
end

local function begin_mapping(self)
    self.captured_inputs = {}
    self.active_input = 0
    self.state = STATE_MAPPING
    continue_mapping_next(self)
end

local function reset(self, gamepad_index)
    local root_node = gui.get_node("root")
    gui.set_enabled(root_node, true)
    gui.set_enabled(gui.get_node("other_controls"), true)

    self.gamepad_index = gamepad_index

    local name_node = gui.get_node("gamepad_name")
    local name = devices.gamepads[gamepad_index] or "Unknown"
    gui.set_text(name_node, name)

    begin_mapping(self)
end

local function disable(self)
    if self.captured_inputs then
        for input_id, capture_data in pairs(self.captured_inputs) do
            gui.delete_node(capture_data.root_node)
        end
        self.captured_inputs = nil
    end

    local root_node = gui.get_node("root")
    gui.set_enabled(root_node, false)
    self.gamepad_index = -1
    self.state = nil
end

-- Defold lifecycle functions

function init(self)
    self.gamepad_index = -1
    highlight_single_input(self, nil)
end

function on_message(self, message_id, message, sender)
    if message_id == msg.START_MAPPING then
        reset(self, message.gamepad_index)
        msg.post(".", msg.ENABLE)
        msg.post(".", msg.ACQUIRE_INPUT_FOCUS)
    elseif message_id == msg.DISABLE then
        disable(self)
        msg.post(".", msg.RELEASE_INPUT_FOCUS)
    elseif message_id == msg.DEVICES_UPDATED then
        if devices.gamepads[self.gamepad_index] == nil then
            msg.post(messages.main_gui, msg.MAPPING_CANCELLED)
        end
    end
end

function on_input(self, action_id, action)
    if action_id == hash("key_esc") and action.pressed then
        msg.post(messages.main_gui, msg.MAPPING_CANCELLED)
    elseif action_id == hash("key_backspace") and action.pressed then
        if self.state == STATE_MAPPING then
            skip_input_mapping(self)
        end
    elseif action_id == hash("key_enter") and action.pressed then
        if self.state == STATE_COMPLETE then
            -- TODO: save mapping
            msg.post(messages.main_gui, msg.MAPPING_COMPLETED, { status = "Mapping complete." })
        end
    elseif action_id == hash("raw") and action.gamepad == self.gamepad_index then
    end
end
