local messages = require "main.messages"
local devices = require "main.devices"

local all_inputs = {
    "lstick_up",
    "lstick_down",
    "lstick_left",
    "lstick_right",
    "lstick_click",
    "rstick_up",
    "rstick_down",
    "rstick_left",
    "rstick_right",
    "rstick_click",
    "lpad_up",
    "lpad_down",
    "lpad_left",
    "lpad_right",
    "rpad_up",
    "rpad_down",
    "rpad_left",
    "rpad_right",
    "lshoulder",
    "rshoulder",
    "ltrigger",
    "rtrigger",
    "back",
    "start",
    "home",
}

local inputs_info = {
    lstick_up = {
        name = "Left Stick Up",
        prompt = "Move the left stick up, and hold it there.",
    },
}

local function highlight_single_input(self, lit_input)
    for _, input in ipairs(all_inputs) do
        local node = gui.get_node("lit_" .. input)
        gui.set_enabled(node, input == lit_input)
    end
end

local function set_prompt_text(self, text)
    gui.set_text(gui.get_node("prompt_text"), text)
end

local function continue_mapping_next(self)
    self.active_input = self.active_input + 1
    local input_id = all_inputs[self.active_input]
    highlight_single_input(self, input_id)

    local input_info = inputs_info[input_id]
    set_prompt_text(self, input_info.prompt)
end

local function begin_mapping(self)
    self.active_input = 0
    continue_mapping_next(self)
end

local function reset(self, gamepad_index)
    local root_node = gui.get_node("root")
    gui.set_enabled(root_node, true)

    self.gamepad_index = gamepad_index

    local name_node = gui.get_node("gamepad_name")
    local name = devices.gamepads[gamepad_index] or "Unknown"
    gui.set_text(name_node, name)

    begin_mapping(self)
end

local function disable(self)
    local root_node = gui.get_node("root")
    gui.set_enabled(root_node, false)
    self.gamepad_index = -1
end

-- Defold lifecycle functions

function init(self)
    self.gamepad_index = -1
    highlight_single_input(self, nil)
end

function on_message(self, message_id, message, sender)
    if message_id == msg.START_MAPPING then
        reset(self, message.gamepad_index)
        msg.post(".", msg.ENABLE)
        msg.post(".", msg.ACQUIRE_INPUT_FOCUS)
    elseif message_id == msg.DISABLE then
        disable(self)
        msg.post(".", msg.RELEASE_INPUT_FOCUS)
    elseif message_id == msg.DEVICES_UPDATED then
        if devices.gamepads[self.gamepad_index] == nil then
            msg.post(messages.main_gui, msg.MAPPING_CANCELLED)
        end
    end
end

function on_input(self, action_id, action)
    if action_id == hash("key_esc") then
        msg.post(messages.main_gui, msg.MAPPING_CANCELLED)
    elseif action_id == hash("raw") and action.gamepad == self.gamepad_index then
    end
end
